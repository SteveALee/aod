# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import colorful.fields
import filebrowser.fields
import django.utils.timezone
import ckeditor_uploader.fields


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(unique=True, max_length=128)),
                ('title_el', models.CharField(max_length=128, unique=True, null=True)),
                ('title_en', models.CharField(max_length=128, unique=True, null=True)),
                ('title_it', models.CharField(max_length=128, unique=True, null=True)),
                ('title_es', models.CharField(max_length=128, unique=True, null=True)),
                ('title_fr', models.CharField(max_length=128, unique=True, null=True)),
                ('title_de', models.CharField(max_length=128, unique=True, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(verbose_name=b'contents')),
                ('content_el', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name=b'contents')),
                ('content_en', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name=b'contents')),
                ('content_it', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name=b'contents')),
                ('content_es', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name=b'contents')),
                ('content_fr', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name=b'contents')),
                ('content_de', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name=b'contents')),
                ('published_date', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('visible', models.BooleanField(default=True)),
                ('protected', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'app_faq_articles',
                'verbose_name': 'Article',
                'verbose_name_plural': 'Articles',
            },
        ),
        migrations.CreateModel(
            name='ArticleDocument',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(unique=True, max_length=64)),
                ('title_el', models.CharField(max_length=64, unique=True, null=True)),
                ('title_en', models.CharField(max_length=64, unique=True, null=True)),
                ('title_it', models.CharField(max_length=64, unique=True, null=True)),
                ('title_es', models.CharField(max_length=64, unique=True, null=True)),
                ('title_fr', models.CharField(max_length=64, unique=True, null=True)),
                ('title_de', models.CharField(max_length=64, unique=True, null=True)),
                ('description', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('description_el', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('description_en', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('description_it', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('description_es', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('description_fr', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('description_de', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('published_date', models.DateTimeField(auto_now=True)),
                ('element', filebrowser.fields.FileBrowseField(max_length=500, null=True, verbose_name='document', blank=True)),
                ('visible', models.BooleanField(default=True)),
                ('protected', models.BooleanField(default=False)),
                ('article', models.ForeignKey(related_name='docs', to='app.Article')),
            ],
            options={
                'db_table': 'app_articles_documents',
                'verbose_name': 'Article Document',
                'verbose_name_plural': 'Article Documents',
            },
        ),
        migrations.CreateModel(
            name='ArticleVideo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(unique=True, max_length=64)),
                ('title_el', models.CharField(max_length=64, unique=True, null=True)),
                ('title_en', models.CharField(max_length=64, unique=True, null=True)),
                ('title_it', models.CharField(max_length=64, unique=True, null=True)),
                ('title_es', models.CharField(max_length=64, unique=True, null=True)),
                ('title_fr', models.CharField(max_length=64, unique=True, null=True)),
                ('title_de', models.CharField(max_length=64, unique=True, null=True)),
                ('description', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('description_el', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('description_en', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('description_it', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('description_es', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('description_fr', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('description_de', models.CharField(max_length=255, unique=True, null=True, blank=True)),
                ('published_date', models.DateTimeField(auto_now=True)),
                ('element', filebrowser.fields.FileBrowseField(max_length=500, null=True, verbose_name='video', blank=True)),
                ('visible', models.BooleanField(default=True)),
                ('protected', models.BooleanField(default=False)),
                ('article', models.ForeignKey(related_name='videos', to='app.Article')),
            ],
            options={
                'db_table': 'app_articles_videos',
                'verbose_name': 'Article Video',
                'verbose_name_plural': 'Article Videos',
            },
        ),
        migrations.CreateModel(
            name='Carers',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('is_active', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Carer',
                'verbose_name_plural': 'Carers',
            },
        ),
        migrations.CreateModel(
            name='CarersAssistConsumers',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('response', models.BooleanField(default=False)),
                ('state', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=b'1970-01-01 00:00:00')),
                ('updated_at', models.DateTimeField(default=b'1970-01-01 00:00:00')),
                ('carer', models.ForeignKey(to='app.Carers')),
            ],
            options={
                'db_table': 'app_carers_assist_consumers',
                'verbose_name': 'Carer Assist Consumer',
                'verbose_name_plural': 'Carers Assist Consumers',
            },
        ),
        migrations.CreateModel(
            name='Categories',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=128)),
                ('title_el', models.CharField(max_length=128, null=True)),
                ('title_en', models.CharField(max_length=128, null=True)),
                ('title_it', models.CharField(max_length=128, null=True)),
                ('title_es', models.CharField(max_length=128, null=True)),
                ('title_fr', models.CharField(max_length=128, null=True)),
                ('title_de', models.CharField(max_length=128, null=True)),
                ('description', models.CharField(max_length=300)),
                ('description_el', models.CharField(max_length=300, null=True)),
                ('description_en', models.CharField(max_length=300, null=True)),
                ('description_it', models.CharField(max_length=300, null=True)),
                ('description_es', models.CharField(max_length=300, null=True)),
                ('description_fr', models.CharField(max_length=300, null=True)),
                ('description_de', models.CharField(max_length=300, null=True)),
                ('question', models.CharField(max_length=255)),
                ('category', models.ForeignKey(related_name='children', on_delete=django.db.models.deletion.SET_NULL, blank=True, to='app.Categories', null=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='ChargingPolicies',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=128)),
                ('name_el', models.CharField(max_length=128, unique=True, null=True)),
                ('name_en', models.CharField(max_length=128, unique=True, null=True)),
                ('name_it', models.CharField(max_length=128, unique=True, null=True)),
                ('name_es', models.CharField(max_length=128, unique=True, null=True)),
                ('name_fr', models.CharField(max_length=128, unique=True, null=True)),
                ('name_de', models.CharField(max_length=128, unique=True, null=True)),
                ('description', models.TextField()),
                ('description_el', models.TextField(null=True)),
                ('description_en', models.TextField(null=True)),
                ('description_it', models.TextField(null=True)),
                ('description_es', models.TextField(null=True)),
                ('description_fr', models.TextField(null=True)),
                ('description_de', models.TextField(null=True)),
            ],
            options={
                'db_table': 'app_charging_policies',
                'verbose_name': 'Charging Policy',
                'verbose_name_plural': 'Charging Policies',
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=128)),
                ('is_active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'app_services_communities',
                'verbose_name': 'Community',
                'verbose_name_plural': 'Communities',
            },
        ),
        migrations.CreateModel(
            name='CommunityMember',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('is_owner', models.BooleanField(default=False)),
                ('message', models.TextField(max_length=1000, null=True, blank=True)),
                ('fee', models.FloatField(null=True, blank=True)),
                ('currency', models.CharField(max_length=10, null=True, blank=True)),
                ('is_professional', models.BooleanField(default=False)),
                ('is_volunteer', models.BooleanField(default=True)),
                ('skype', models.CharField(max_length=128, null=True, blank=True)),
                ('is_active', models.NullBooleanField()),
                ('joined_date', models.DateTimeField(auto_now=True)),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
                ('community', models.ForeignKey(to='app.Community')),
            ],
            options={
                'db_table': 'app_communities_members',
                'verbose_name': 'CommunityMember',
                'verbose_name_plural': 'CommunityMembers',
            },
        ),
        migrations.CreateModel(
            name='Components',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=127)),
                ('description', models.TextField()),
                ('description_el', models.TextField(null=True)),
                ('description_en', models.TextField(null=True)),
                ('description_it', models.TextField(null=True)),
                ('description_es', models.TextField(null=True)),
                ('description_fr', models.TextField(null=True)),
                ('description_de', models.TextField(null=True)),
                ('is_enabled', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'App Component',
                'verbose_name_plural': 'App Components',
            },
        ),
        migrations.CreateModel(
            name='Consumers',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('crowd_fund_participation', models.BooleanField(default=True)),
                ('crowd_fund_notification', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Consumer',
                'verbose_name_plural': 'Consumers',
            },
        ),
        migrations.CreateModel(
            name='ConsumerServiceEvaluation',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('score', models.SmallIntegerField(default=0.0)),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
                ('consumer', models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, to='app.Consumers', null=True)),
            ],
            options={
                'db_table': 'app_consumer_service_evaluation',
                'verbose_name': 'Consumer Service Evaluation',
                'verbose_name_plural': 'Consumer Service Evaluations',
            },
        ),
        migrations.CreateModel(
            name='ConsumersToServices',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('payment_id', models.CharField(max_length=96, null=True)),
                ('plan_id', models.CharField(max_length=96, null=True)),
                ('paypal_user', models.CharField(max_length=64, null=True)),
                ('cost', models.FloatField(null=True)),
                ('purchased_date', models.DateTimeField()),
                ('rating', models.FloatField(null=True)),
                ('rating_rationale', models.TextField(null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('consumer', models.ForeignKey(to='app.Consumers')),
            ],
            options={
                'ordering': ['consumer', 'service'],
                'db_table': 'app_consumers_services',
            },
        ),
        migrations.CreateModel(
            name='ContactUs',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('skype_id', models.CharField(help_text=b'Hint: Entert the Skype id that characterizes the application', unique=True, max_length=64)),
                ('skype_button_id', models.CharField(help_text=b'Hint: Enter the string that is generated from skype online service. It is included to JS file to be displayed the skype button', unique=True, max_length=255)),
                ('phone', models.CharField(help_text=b'Hint: Enter the phone number for contact purposes', max_length=15)),
                ('email', models.EmailField(help_text=b'Hint: Enter the email account that users can access', max_length=100)),
                ('address', models.CharField(max_length=255, null=True, blank=True)),
                ('active', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'app_contact_us',
                'verbose_name': 'App contact details',
                'verbose_name_plural': 'App contact details',
            },
        ),
        migrations.CreateModel(
            name='CookiePolicy',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=32)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(verbose_name=b'contents')),
                ('content_el', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name=b'contents')),
                ('content_en', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name=b'contents')),
                ('content_it', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name=b'contents')),
                ('content_es', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name=b'contents')),
                ('content_fr', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name=b'contents')),
                ('content_de', ckeditor_uploader.fields.RichTextUploadingField(null=True, verbose_name=b'contents')),
                ('published_date', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'app_cookie_policy',
                'verbose_name': 'Cookie Policy',
                'verbose_name_plural': 'Cookie Policy',
            },
        ),
        migrations.CreateModel(
            name='EvaluationMetric',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(unique=True, max_length=96)),
                ('description', models.CharField(max_length=512, null=True, blank=True)),
                ('weight', models.FloatField(default=1.0)),
                ('min', models.SmallIntegerField(default=0.0)),
                ('max', models.SmallIntegerField(default=5.0)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'app_evaluation_metrics',
                'verbose_name': 'Evaluation Metric',
                'verbose_name_plural': 'Evaluation Metrics',
            },
        ),
        migrations.CreateModel(
            name='Favicon',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=32)),
                ('favicon', filebrowser.fields.FileBrowseField(max_length=500, verbose_name='favicon')),
                ('selected', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'App Favicon',
                'verbose_name_plural': 'App Favicons',
            },
        ),
        migrations.CreateModel(
            name='IncomingQuestions',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('user', models.CharField(help_text=b'Name and lastname of user/visitor', max_length=128)),
                ('email', models.EmailField(help_text=b'Email info of user', max_length=128)),
                ('topic', models.CharField(help_text=b'The thematic area of question', max_length=64)),
                ('message', models.TextField(help_text=b'The question of the user', max_length=500)),
                ('pub_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'app_questions',
                'verbose_name': 'App incoming question',
                'verbose_name_plural': 'App incoming questions',
            },
        ),
        migrations.CreateModel(
            name='ItExperience',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('level', models.CharField(max_length=63)),
                ('level_el', models.CharField(max_length=63, null=True)),
                ('level_en', models.CharField(max_length=63, null=True)),
                ('level_it', models.CharField(max_length=63, null=True)),
                ('level_es', models.CharField(max_length=63, null=True)),
                ('level_fr', models.CharField(max_length=63, null=True)),
                ('level_de', models.CharField(max_length=63, null=True)),
                ('description', models.CharField(max_length=255)),
                ('description_el', models.CharField(max_length=255, null=True)),
                ('description_en', models.CharField(max_length=255, null=True)),
                ('description_it', models.CharField(max_length=255, null=True)),
                ('description_es', models.CharField(max_length=255, null=True)),
                ('description_fr', models.CharField(max_length=255, null=True)),
                ('description_de', models.CharField(max_length=255, null=True)),
            ],
            options={
                'ordering': ['level'],
                'db_table': 'app_it_experience',
                'verbose_name': 'IT skill level',
                'verbose_name_plural': 'IT skill levels',
            },
        ),
        migrations.CreateModel(
            name='LanguageFlag',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('alias', models.CharField(unique=True, max_length=4)),
                ('flag', filebrowser.fields.FileBrowseField(max_length=500, verbose_name='flag')),
            ],
            options={
                'verbose_name': 'App Language Flag',
                'verbose_name_plural': 'App Language Flags',
            },
        ),
        migrations.CreateModel(
            name='Logo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=32)),
                ('placeholder', models.CharField(default=b'Welcome in platform', max_length=96)),
                ('logo', filebrowser.fields.FileBrowseField(max_length=500, verbose_name='logo')),
                ('selected', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'App Logo',
                'verbose_name_plural': 'App Logos',
            },
        ),
        migrations.CreateModel(
            name='Metadata',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=64)),
                ('description', models.TextField(help_text=b"Enter the application's description that is included in HTML meta element with `name` -> `description`")),
                ('keywords', models.CharField(help_text=b"Enter the application's keywords that are included in the HTML meta element with `name` -> `keywords`", max_length=128)),
                ('author', models.CharField(help_text=b"Enter the application's author that is included in the HTML meta element with `name` -> `author`", max_length=32)),
                ('active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'App Metadata',
                'verbose_name_plural': 'App Metadata',
            },
        ),
        migrations.CreateModel(
            name='NasConfiguration',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('parameter', models.CharField(max_length=512)),
                ('parameter_el', models.CharField(max_length=512, null=True)),
                ('parameter_en', models.CharField(max_length=512, null=True)),
                ('parameter_it', models.CharField(max_length=512, null=True)),
                ('parameter_es', models.CharField(max_length=512, null=True)),
                ('parameter_fr', models.CharField(max_length=512, null=True)),
                ('parameter_de', models.CharField(max_length=512, null=True)),
                ('value', models.CharField(max_length=255)),
                ('value_el', models.CharField(max_length=255, null=True)),
                ('value_en', models.CharField(max_length=255, null=True)),
                ('value_it', models.CharField(max_length=255, null=True)),
                ('value_es', models.CharField(max_length=255, null=True)),
                ('value_fr', models.CharField(max_length=255, null=True)),
                ('value_de', models.CharField(max_length=255, null=True)),
                ('is_default', models.BooleanField(default=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['nas'],
                'db_table': 'app_network_services_configuration',
            },
        ),
        migrations.CreateModel(
            name='NasConsumersToServices',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('cost', models.FloatField(null=True)),
                ('purchased_date', models.DateTimeField()),
                ('rating', models.FloatField(null=True)),
                ('rating_rationale', models.TextField(null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('consumer', models.ForeignKey(to='app.Consumers')),
            ],
            options={
                'ordering': ['consumer', 'service'],
                'db_table': 'app_nas_consumers_services',
            },
        ),
        migrations.CreateModel(
            name='NasTemporarySetup',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('carer', models.ForeignKey(to='app.Carers')),
                ('consumer', models.ForeignKey(to='app.Consumers')),
            ],
            options={
                'ordering': ['created_at'],
                'db_table': 'app_nas_temp_setup',
            },
        ),
        migrations.CreateModel(
            name='PaypalCredentials',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('username', models.CharField(max_length=512)),
                ('password', models.CharField(max_length=512)),
                ('token', models.CharField(max_length=512, null=True, blank=True)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='PlatformCommunityMember',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('message', models.TextField(max_length=1000, null=True, blank=True)),
                ('fee', models.FloatField(null=True, blank=True)),
                ('currency', models.CharField(max_length=10, null=True, blank=True)),
                ('is_professional', models.BooleanField(default=False)),
                ('is_volunteer', models.BooleanField(default=True)),
                ('skype', models.CharField(max_length=128, null=True, blank=True)),
                ('is_active', models.NullBooleanField()),
                ('joined_date', models.DateTimeField(auto_now=True)),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'app_platform_communities_members',
                'verbose_name': 'PlatformCommunityMember',
                'verbose_name_plural': 'PlatformCommunityMembers',
            },
        ),
        migrations.CreateModel(
            name='Providers',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('crowd_fund_participation', models.BooleanField(default=True)),
                ('crowd_fund_notification', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=False)),
                ('company', models.CharField(max_length=128, null=True)),
            ],
            options={
                'verbose_name': 'Provider',
                'verbose_name_plural': 'Providers',
            },
        ),
        migrations.CreateModel(
            name='ServiceConfiguration',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('parameter', models.CharField(max_length=512)),
                ('parameter_el', models.CharField(max_length=512, null=True)),
                ('parameter_en', models.CharField(max_length=512, null=True)),
                ('parameter_it', models.CharField(max_length=512, null=True)),
                ('parameter_es', models.CharField(max_length=512, null=True)),
                ('parameter_fr', models.CharField(max_length=512, null=True)),
                ('parameter_de', models.CharField(max_length=512, null=True)),
                ('value', models.CharField(max_length=255)),
                ('value_el', models.CharField(max_length=255, null=True)),
                ('value_en', models.CharField(max_length=255, null=True)),
                ('value_it', models.CharField(max_length=255, null=True)),
                ('value_es', models.CharField(max_length=255, null=True)),
                ('value_fr', models.CharField(max_length=255, null=True)),
                ('value_de', models.CharField(max_length=255, null=True)),
                ('is_default', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['service_id'],
                'db_table': 'app_services_configuration',
                'verbose_name': 'Service Configuration',
                'verbose_name_plural': 'Service Configuration',
            },
        ),
        migrations.CreateModel(
            name='ServiceKeywords',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=50)),
                ('title_el', models.CharField(max_length=50, null=True)),
                ('title_en', models.CharField(max_length=50, null=True)),
                ('title_it', models.CharField(max_length=50, null=True)),
                ('title_es', models.CharField(max_length=50, null=True)),
                ('title_fr', models.CharField(max_length=50, null=True)),
                ('title_de', models.CharField(max_length=50, null=True)),
            ],
            options={
                'ordering': ['service_id'],
                'db_table': 'app_services_keywords',
                'verbose_name': 'Service Keyword',
                'verbose_name_plural': 'Service Keywords',
            },
        ),
        migrations.CreateModel(
            name='ServiceLanguages',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('alias', models.CharField(max_length=10)),
            ],
            options={
                'ordering': ['service_id'],
                'db_table': 'app_services_languages',
                'verbose_name_plural': 'Service Languages',
            },
        ),
        migrations.CreateModel(
            name='ServicePayment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('payment_type', models.CharField(help_text=b'sale or authorize', max_length=36)),
                ('tax', models.DecimalField(max_digits=10, decimal_places=2)),
                ('handling_fee', models.DecimalField(max_digits=10, decimal_places=2)),
                ('shipping', models.DecimalField(max_digits=10, decimal_places=2)),
                ('shipping_discount', models.DecimalField(max_digits=10, decimal_places=2)),
                ('insurance', models.DecimalField(max_digits=10, decimal_places=2)),
                ('updated_date', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'app_service_payment_details',
                'verbose_name': 'Service payment details',
                'verbose_name_plural': 'Service payment details',
            },
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=128)),
                ('title_el', models.CharField(max_length=128, null=True)),
                ('title_en', models.CharField(max_length=128, null=True)),
                ('title_it', models.CharField(max_length=128, null=True)),
                ('title_es', models.CharField(max_length=128, null=True)),
                ('title_fr', models.CharField(max_length=128, null=True)),
                ('title_de', models.CharField(max_length=128, null=True)),
                ('description', models.TextField()),
                ('description_el', models.TextField(null=True)),
                ('description_en', models.TextField(null=True)),
                ('description_it', models.TextField(null=True)),
                ('description_es', models.TextField(null=True)),
                ('description_fr', models.TextField(null=True)),
                ('description_de', models.TextField(null=True)),
                ('image', models.ImageField(upload_to=b'app/services/images/', blank=True)),
                ('version', models.CharField(help_text='Define the version of the service if it is machine-based one', max_length=10, null=True, blank=True)),
                ('license', models.CharField(help_text='Define the licenses of the service if it is machine-based one', max_length=30, null=True, blank=True)),
                ('type', models.CharField(max_length=1, choices=[(b'H', 'Human Based'), (b'M', 'Machine Based')])),
                ('price', models.FloatField(default=b'0.0', help_text='Define the price of the service', null=True)),
                ('unit', models.TextField(max_length=10)),
                ('requirements', models.TextField(max_length=500, null=True, blank=True)),
                ('requirements_el', models.TextField(max_length=500, null=True, blank=True)),
                ('requirements_en', models.TextField(max_length=500, null=True, blank=True)),
                ('requirements_it', models.TextField(max_length=500, null=True, blank=True)),
                ('requirements_es', models.TextField(max_length=500, null=True, blank=True)),
                ('requirements_fr', models.TextField(max_length=500, null=True, blank=True)),
                ('requirements_de', models.TextField(max_length=500, null=True, blank=True)),
                ('installation_guide', models.TextField(null=True, blank=True)),
                ('installation_guide_el', models.TextField(null=True, blank=True)),
                ('installation_guide_en', models.TextField(null=True, blank=True)),
                ('installation_guide_it', models.TextField(null=True, blank=True)),
                ('installation_guide_es', models.TextField(null=True, blank=True)),
                ('installation_guide_fr', models.TextField(null=True, blank=True)),
                ('installation_guide_de', models.TextField(null=True, blank=True)),
                ('usage_guidelines', models.TextField(null=True, blank=True)),
                ('usage_guidelines_el', models.TextField(null=True, blank=True)),
                ('usage_guidelines_en', models.TextField(null=True, blank=True)),
                ('usage_guidelines_it', models.TextField(null=True, blank=True)),
                ('usage_guidelines_es', models.TextField(null=True, blank=True)),
                ('usage_guidelines_fr', models.TextField(null=True, blank=True)),
                ('usage_guidelines_de', models.TextField(null=True, blank=True)),
                ('is_public', models.BooleanField(default=True, help_text='Define the scope of the service; use True for public access on it or False to limit the users that can access it ', max_length=1)),
                ('language_constraint', models.BooleanField(default=True)),
                ('location_constraint', models.BooleanField(default=True)),
                ('latitude', models.FloatField(null=True, blank=True)),
                ('longitude', models.FloatField(null=True, blank=True)),
                ('coverage', models.FloatField(help_text='The radius in km where the provider can offer this service', null=True, blank=True)),
                ('constraints', models.TextField(help_text='Free text to enter other constraints', null=True, blank=True)),
                ('constraints_el', models.TextField(help_text='Free text to enter other constraints', null=True, blank=True)),
                ('constraints_en', models.TextField(help_text='Free text to enter other constraints', null=True, blank=True)),
                ('constraints_it', models.TextField(help_text='Free text to enter other constraints', null=True, blank=True)),
                ('constraints_es', models.TextField(help_text='Free text to enter other constraints', null=True, blank=True)),
                ('constraints_fr', models.TextField(help_text='Free text to enter other constraints', null=True, blank=True)),
                ('constraints_de', models.TextField(help_text='Free text to enter other constraints', null=True, blank=True)),
                ('skype', models.CharField(max_length=63, null=True, blank=True)),
                ('is_visible', models.BooleanField(default=True, help_text='Click the checkbox if the provider wants to publish it in the platform', max_length=1)),
                ('community_support', models.BooleanField(default=False)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('modified_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('categories', models.ManyToManyField(to='app.Categories')),
                ('charging_policy', models.ForeignKey(to='app.ChargingPolicies')),
                ('owner', models.ForeignKey(to='app.Providers')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
            },
        ),
        migrations.CreateModel(
            name='ServicesToTechnicalSupport',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=255)),
                ('title_el', models.CharField(max_length=255, null=True)),
                ('title_en', models.CharField(max_length=255, null=True)),
                ('title_it', models.CharField(max_length=255, null=True)),
                ('title_es', models.CharField(max_length=255, null=True)),
                ('title_fr', models.CharField(max_length=255, null=True)),
                ('title_de', models.CharField(max_length=255, null=True)),
                ('description', models.TextField(null=True)),
                ('software_dependencies', models.TextField(null=True)),
                ('software_dependencies_el', models.TextField(null=True)),
                ('software_dependencies_en', models.TextField(null=True)),
                ('software_dependencies_it', models.TextField(null=True)),
                ('software_dependencies_es', models.TextField(null=True)),
                ('software_dependencies_fr', models.TextField(null=True)),
                ('software_dependencies_de', models.TextField(null=True)),
                ('link', models.CharField(default=b'', max_length=300)),
                ('path', models.TextField(default=b'/media/app/services/technical-support//test.pdf')),
                ('extension', models.CharField(default=b'unknown', max_length=15)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('visible', models.BooleanField(default=True)),
                ('service', models.ForeignKey(related_name='technical_support', to='app.Services')),
            ],
            options={
                'ordering': ['service', 'technical_support'],
                'db_table': 'app_services_technical_support',
                'verbose_name_plural': 'Service Technical Support',
            },
        ),
        migrations.CreateModel(
            name='SocialNetwork',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(max_length=32)),
                ('url', models.URLField(null=True, blank=True)),
                ('visible', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Social Network',
                'verbose_name_plural': 'Social Networks',
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(unique=True, max_length=128)),
                ('title_el', models.CharField(max_length=128, unique=True, null=True)),
                ('title_en', models.CharField(max_length=128, unique=True, null=True)),
                ('title_it', models.CharField(max_length=128, unique=True, null=True)),
                ('title_es', models.CharField(max_length=128, unique=True, null=True)),
                ('title_fr', models.CharField(max_length=128, unique=True, null=True)),
                ('title_de', models.CharField(max_length=128, unique=True, null=True)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='TaskCategory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(help_text='Microlabora categories', max_length=255)),
                ('title_el', models.CharField(help_text='Microlabora categories', max_length=255, null=True)),
                ('title_en', models.CharField(help_text='Microlabora categories', max_length=255, null=True)),
                ('title_it', models.CharField(help_text='Microlabora categories', max_length=255, null=True)),
                ('title_es', models.CharField(help_text='Microlabora categories', max_length=255, null=True)),
                ('title_fr', models.CharField(help_text='Microlabora categories', max_length=255, null=True)),
                ('title_de', models.CharField(help_text='Microlabora categories', max_length=255, null=True)),
            ],
            options={
                'db_table': 'ml_categories',
                'verbose_name': 'Task categories',
                'verbose_name_plural': 'Task categories',
            },
        ),
        migrations.CreateModel(
            name='TechnicalSupport',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('type', models.CharField(max_length=64)),
                ('type_el', models.CharField(max_length=64, null=True)),
                ('type_en', models.CharField(max_length=64, null=True)),
                ('type_it', models.CharField(max_length=64, null=True)),
                ('type_es', models.CharField(max_length=64, null=True)),
                ('type_fr', models.CharField(max_length=64, null=True)),
                ('type_de', models.CharField(max_length=64, null=True)),
                ('description', models.TextField(null=True)),
                ('description_el', models.TextField(null=True)),
                ('description_en', models.TextField(null=True)),
                ('description_it', models.TextField(null=True)),
                ('description_es', models.TextField(null=True)),
                ('description_fr', models.TextField(null=True)),
                ('description_de', models.TextField(null=True)),
                ('alias', models.CharField(max_length=32, null=True)),
            ],
            options={
                'ordering': ['type'],
                'db_table': 'app_technical_support_types',
                'verbose_name': 'Technical Support',
                'verbose_name_plural': 'Technical Support',
            },
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(unique=True, max_length=32)),
                ('url', models.CharField(help_text=b'Help: Upload this css file in app/static/app/content/ directory and run python manage.py collectstatic --noinput cmd', unique=True, max_length=254)),
                ('success_base', colorful.fields.RGBColorField()),
                ('primary_base', colorful.fields.RGBColorField()),
                ('info_base', colorful.fields.RGBColorField()),
                ('warning_base', colorful.fields.RGBColorField()),
                ('danger_base', colorful.fields.RGBColorField()),
                ('radius', models.IntegerField(default=0, choices=[(0, b'0 pixels'), (1, b'1 pixels'), (2, b'2 pixels'), (3, b'3 pixels'), (4, b'4 pixels'), (5, b'5 pixels'), (6, b'6 pixels'), (7, b'7 pixels'), (8, b'8 pixels'), (9, b'9 pixels'), (10, b'10 pixels'), (11, b'11 pixels'), (12, b'12 pixels'), (13, b'13 pixels'), (14, b'14 pixels'), (15, b'15 pixels'), (16, b'16 pixels'), (17, b'17 pixels'), (18, b'18 pixels'), (19, b'19 pixels'), (20, b'20 pixels')])),
                ('is_visible', models.BooleanField(default=False)),
                ('is_default', models.BooleanField(default=False)),
                ('created_date', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'app_themes',
                'verbose_name': 'App Theme',
                'verbose_name_plural': 'App Themes',
            },
        ),
        migrations.CreateModel(
            name='Tokens',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('access_token', models.CharField(max_length=512)),
                ('refresh_token', models.CharField(max_length=512)),
                ('expires_in', models.IntegerField()),
                ('scope', models.CharField(max_length=64)),
                ('token_type', models.CharField(max_length=16)),
            ],
            options={
                'db_table': 'app_oauth2_tokens',
                'verbose_name': 'Token',
                'verbose_name_plural': 'Tokens',
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('title', models.CharField(unique=True, max_length=128)),
                ('title_el', models.CharField(max_length=128, unique=True, null=True)),
                ('title_en', models.CharField(max_length=128, unique=True, null=True)),
                ('title_it', models.CharField(max_length=128, unique=True, null=True)),
                ('title_es', models.CharField(max_length=128, unique=True, null=True)),
                ('title_fr', models.CharField(max_length=128, unique=True, null=True)),
                ('title_de', models.CharField(max_length=128, unique=True, null=True)),
                ('description', models.CharField(max_length=512, null=True)),
                ('description_el', models.CharField(max_length=512, null=True)),
                ('description_en', models.CharField(max_length=512, null=True)),
                ('description_it', models.CharField(max_length=512, null=True)),
                ('description_es', models.CharField(max_length=512, null=True)),
                ('description_fr', models.CharField(max_length=512, null=True)),
                ('description_de', models.CharField(max_length=512, null=True)),
                ('created_date', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('modified_date', models.DateTimeField(auto_now=True, null=True)),
                ('visible', models.BooleanField(default=True)),
                ('protected', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'app_faq_topics',
                'verbose_name': 'Topic',
                'verbose_name_plural': 'Topics',
            },
        ),
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=63)),
                ('lastname', models.CharField(max_length=63)),
                ('gender', models.CharField(max_length=1, choices=[(b'M', b'Mr'), (b'W', b'Miss')])),
                ('username', models.CharField(unique=True, max_length=127)),
                ('pwd', models.CharField(max_length=128)),
                ('email', models.EmailField(max_length=255)),
                ('mobile', models.CharField(default=b'000000000000000', max_length=15)),
                ('country', models.CharField(default=b'Greece', max_length=128)),
                ('city', models.CharField(max_length=128, null=True)),
                ('address', models.CharField(max_length=255, null=True)),
                ('postal_code', models.CharField(max_length=16, null=True)),
                ('logo', models.ImageField(upload_to=b'app/users/logos', blank=True)),
                ('cover', models.ImageField(upload_to=b'app/users/covers', blank=True)),
                ('registration', models.DateTimeField(default=django.utils.timezone.now, verbose_name=b'registration date')),
                ('community_participation', models.BooleanField(default=False)),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now, verbose_name=b'last login')),
                ('is_active', models.BooleanField(default=False)),
                ('categories', models.ManyToManyField(to='app.Categories')),
                ('experience', models.ForeignKey(to='app.ItExperience')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='UserTheme',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('pub_date', models.DateTimeField(auto_now=True)),
                ('theme', models.ForeignKey(to='app.Theme')),
                ('user', models.ForeignKey(to='app.Users')),
            ],
            options={
                'db_table': 'app_user_themes',
                'verbose_name': 'User Preferred Theme',
                'verbose_name_plural': 'User Preferred Themes',
            },
        ),
        migrations.AddField(
            model_name='tokens',
            name='user',
            field=models.ForeignKey(to='app.Users'),
        ),
        migrations.AddField(
            model_name='servicestotechnicalsupport',
            name='technical_support',
            field=models.ForeignKey(to='app.TechnicalSupport'),
        ),
        migrations.AddField(
            model_name='servicepayment',
            name='service',
            field=models.ForeignKey(to='app.Services'),
        ),
        migrations.AddField(
            model_name='servicelanguages',
            name='service',
            field=models.ForeignKey(related_name='languages', to='app.Services'),
        ),
        migrations.AddField(
            model_name='servicekeywords',
            name='service',
            field=models.ForeignKey(related_name='keywords', to='app.Services'),
        ),
        migrations.AddField(
            model_name='serviceconfiguration',
            name='service',
            field=models.ForeignKey(related_name='configuration', to='app.Services'),
        ),
        migrations.AddField(
            model_name='providers',
            name='user',
            field=models.ForeignKey(to='app.Users'),
        ),
        migrations.AddField(
            model_name='platformcommunitymember',
            name='user',
            field=models.ForeignKey(to='app.Users'),
        ),
        migrations.AddField(
            model_name='paypalcredentials',
            name='provider',
            field=models.ForeignKey(to='app.Providers'),
        ),
        migrations.AddField(
            model_name='nastemporarysetup',
            name='service',
            field=models.ForeignKey(to='app.Services'),
        ),
        migrations.AddField(
            model_name='nasconsumerstoservices',
            name='service',
            field=models.ForeignKey(to='app.Services'),
        ),
        migrations.AddField(
            model_name='nasconfiguration',
            name='nas',
            field=models.ForeignKey(related_name='configuration', to='app.NasConsumersToServices'),
        ),
        migrations.AddField(
            model_name='consumerstoservices',
            name='service',
            field=models.ForeignKey(related_name='service_consumers', to='app.Services'),
        ),
        migrations.AddField(
            model_name='consumerserviceevaluation',
            name='evaluation_metric',
            field=models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, to='app.EvaluationMetric', null=True),
        ),
        migrations.AddField(
            model_name='consumerserviceevaluation',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.SET_NULL, to='app.Services', null=True),
        ),
        migrations.AddField(
            model_name='consumers',
            name='user',
            field=models.ForeignKey(to='app.Users'),
        ),
        migrations.AddField(
            model_name='communitymember',
            name='user',
            field=models.ForeignKey(to='app.Users'),
        ),
        migrations.AddField(
            model_name='community',
            name='ref_service',
            field=models.ForeignKey(related_name='services', on_delete=django.db.models.deletion.SET_NULL, to='app.Services', null=True),
        ),
        migrations.AddField(
            model_name='community',
            name='service',
            field=models.ForeignKey(related_name='community_services', to='app.Services'),
        ),
        migrations.AddField(
            model_name='categories',
            name='tags',
            field=models.ManyToManyField(to='app.Tags'),
        ),
        migrations.AddField(
            model_name='carersassistconsumers',
            name='consumer',
            field=models.ForeignKey(to='app.Consumers'),
        ),
        migrations.AddField(
            model_name='carers',
            name='user',
            field=models.ForeignKey(to='app.Users'),
        ),
        migrations.AddField(
            model_name='article',
            name='service',
            field=models.ForeignKey(related_name='service', on_delete=django.db.models.deletion.SET_NULL, blank=True, to='app.Services', null=True),
        ),
        migrations.AddField(
            model_name='article',
            name='topic',
            field=models.ForeignKey(related_name='articles', to='app.Topic'),
        ),
        migrations.AlterUniqueTogether(
            name='usertheme',
            unique_together=set([('user', 'theme')]),
        ),
    ]
